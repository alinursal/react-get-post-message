{"version":3,"sources":["main.js"],"names":["MessageForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","state","messageText","messageType","handleTextChange","bind","handleTypeChange","postMessages","evt","setState","target","value","preventDefault","newStatus","message","type","time","date","format","Date","axios","post","apiUrl","then","response","console","log","data","success","id","addMessage","React","Component","FeaturesMessage","messageDate","parse","dateFormat","ShowMessageList","messages","status","isLoaded","displayMessages","MessageManager","feedback","advice","tutorial","retrieveMessages","get","updatedStatuses","slice","push","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["//@prepros-prepend main.js\r\n\r\nclass MessageForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // type options are an object; convert to an array and map\r\n    this.typeOptions = Object.keys(props.messageTypes).map(function(key) {\r\n      if (props.messageTypes.hasOwnProperty(key)) {\r\n        return (\r\n          <option key={key} value={key}>\r\n            {props.messageTypes[key]}\r\n          </option>\r\n        );\r\n      }\r\n    });\r\n\r\n    {/* so we don't have to type this over and over */}\r\n    this.defaultType = this.typeOptions[0].key;\r\n\r\n    // to hold the data from form submission\r\n    this.state = {\r\n      messageText: \"\",\r\n      messageType: this.defaultType\r\n    }\r\n\r\n    this.handleTextChange = this.handleTextChange.bind(this);\r\n    this.handleTypeChange = this.handleTypeChange.bind(this);\r\n    this.postMessages = this.postMessages.bind(this);\r\n\r\n  }\r\n\r\n  // that refers to the value of this text area\r\n  handleTextChange(evt) {\r\n    this.setState({\r\n      messageText: evt.target.value\r\n    });\r\n  }\r\n\r\n  handleTypeChange(evt) {\r\n    this.setState({\r\n      messageType: evt.target.value\r\n    });\r\n  }\r\n\r\n  postMessages(evt) {\r\n\r\n    // to prevent form really submit\r\n    evt.preventDefault();\r\n\r\n    // a new status object that API is expecting\r\n    var newStatus = {\r\n      message: this.state.messageText,\r\n      type: this.state.messageType,\r\n      // use a time date library that database expects\r\n      time: date.format(new Date(), \"YYYY-MM-DD, HH:mm\")\r\n    };\r\n\r\n    // post the data up to the database with using axios\r\n    // pass in new status as the data that goes with it\r\n    axios.post(this.props.apiUrl + \"/post.php\", newStatus).then(\r\n      function(response) {\r\n        console.log(response);\r\n\r\n    if (response.data.success) {\r\n\r\n        //post a new update after posting the old one\r\n        this.setState({\r\n            messageText: \"\",\r\n            messageType: this.defaultType\r\n        });\r\n    }\r\n\r\n    //all the messages that are retrieved from the database have their ID assigned\r\n    newStatus.id = response.data.id;\r\n\r\n    // call new addMessage function\r\n    this.props.addMessage(newStatus);\r\n\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.postMessages}>\r\n        <h3>Post a Data</h3>\r\n\r\n        <div className=\"field-group\">\r\n          <label htmlFor=\"txt-message\">Message</label>\r\n          <textarea id=\"txt-message\" rows=\"2\" onChange={this.handleTextChange} value={this.state.messageText} required/>\r\n        </div>\r\n\r\n        <div className=\"field-group\">\r\n          <label htmlFor=\"txt-type\">Type</label>\r\n          <select id=\"txt-type\" onChange={this.handleTypeChange} value={this.state.messageType}>{this.typeOptions}</select>\r\n        </div>\r\n\r\n        <div className=\"field-group action\">\r\n          <input type=\"submit\" class=\"btnSend\" value=\"Post Data\" />\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nfunction FeaturesMessage(props) {\r\n  var messageDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\r\n  dateFormat = \"M/D/Y, h:mm A\";\r\n\r\n  return (\r\n    <div className=\"status-message\">\r\n      {props.message}\r\n      <span className=\"name\">— {props.type}</span>\r\n      <span className=\"time\">{date.format(messageDate, dateFormat)}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nclass ShowMessageList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  // remove all state and any need for life cycle methods from this component so, we could just convert it into a function\r\n  }\r\n\r\n\r\n  // fire data after my component is rendered \r\n  componentDidMount() {\r\n    //this.retrieveMessages();\r\n  }\r\n\r\n  // After we get messages from database, display them on the page\r\n  // I'm pulling up the label of the type by looking into the message types props, and pulling that out based on the key, which is what's stored in the database,  instead of the full name of the message type and I'm using bind this to make sure that this, inside this callback function, refers to the same thing as outside and then finally, let's look at the status message component This is a function component Very short\r\n\r\n  displayMessages() {\r\n    return this.props.messages.map(\r\n      function(status) {\r\n        return (\r\n          <li key={status.id}>\r\n            <FeaturesMessage\r\n              message={status.message}\r\n              type={this.props.messageTypes[status.type]}\r\n              time={status.time}\r\n            />\r\n          </li>\r\n        );\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.props.isLoaded) {\r\n      return <ul id=\"message-list\">{this.displayMessages()}</ul>;\r\n    }else {\r\n      return (\r\n        <div id=\"message-list\" className=\"loading\">\r\n          Loading...\r\n          <div className=\"spinner\">\r\n            <div className=\"bounce1\" />\r\n            <div className=\"bounce2\" />\r\n            <div className=\"bounce3\" />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nclass MessageManager extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // just a property, doesn't have to be state\r\n    this.messageTypes = {\r\n      feedback: \"Feedback\",\r\n      advice: \"Advice\",\r\n      tutorial: \"Tutorial\"\r\n    };\r\n\r\n    this.apiUrl = \"https://alinursal.com/react-get-post-message/database-api\";\r\n\r\n    // save my message array in state\r\n    this.state = {\r\n      messages: [],\r\n      isLoaded: false\r\n    };\r\n\r\n    this.addMessage= this.addMessage.bind(this);\r\n\r\n  }\r\n\r\n  // fire data after my component is rendered \r\n  componentDidMount() {\r\n    this.retrieveMessages();\r\n  }\r\n\r\n  // Get data from database with using axios\r\n  retrieveMessages() {\r\n    axios.get(this.apiUrl+\"/get.php\").then(\r\n      function(response) {\r\n        this.setState({\r\n          messages: response.data,\r\n          isLoaded: true\r\n        });\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  // Accept a status object which'll be built by the MessageForm\r\n  addMessage(status) {\r\n    var updatedStatuses = this.state.messages.slice(0);\r\n\r\n    // push a new status update into the array\r\n    updatedStatuses.push(status);\r\n\r\n    // reset the state\r\n    this.setState({\r\n      messages: updatedStatuses\r\n    });\r\n  }\r\n\r\n    // make the call to the API with apiURL\r\n    // they are now part of the manager into these two components so we added messages and isLoaded\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div id=\"post-message\">\r\n          <MessageForm messageTypes={this.messageTypes} apiUrl={this.apiUrl} addMessage={this.addMessage}/>\r\n        </div>\r\n        <ShowMessageList messageTypes={this.messageTypes} messages={this.state.messages} isLoaded={this.state.isLoaded}/>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nReactDOM.render(<MessageManager />, document.getElementById(\"react-message\"));"]}